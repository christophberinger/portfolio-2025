---
interface Props {
  class?: string;
  delay?: number;
}

const { class: className = '', delay = 0 } = Astro.props;
---

<div 
  class={`scroll-reveal ${className}`} 
  style={delay ? `animation-delay: ${delay}ms` : ''}
  data-scroll-reveal
>
  <slot />
</div>

<script>
  // Intersection Observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('revealed');
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe all scroll reveal elements
  document.addEventListener('DOMContentLoaded', () => {
    const scrollElements = document.querySelectorAll('[data-scroll-reveal]');
    scrollElements.forEach((el) => observer.observe(el));
  });

  // Handle page navigation (for Astro view transitions)
  document.addEventListener('astro:page-load', () => {
    const scrollElements = document.querySelectorAll('[data-scroll-reveal]');
    scrollElements.forEach((el) => observer.observe(el));
  });
</script>

<style>
  .scroll-reveal {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .scroll-reveal.revealed {
    opacity: 1;
    transform: translateY(0);
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .scroll-reveal {
      opacity: 1;
      transform: none;
      transition: none;
    }
  }

  /* Ensure content is visible without JavaScript */
  .no-js .scroll-reveal {
    opacity: 1;
    transform: none;
  }
</style>